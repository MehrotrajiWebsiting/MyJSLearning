// EXECUTION CONTEXT MEANS HOW JS RUNS/EXECUTES YOUR FILE

/*THERE ARE MAINLY 2 +1(NOT REQUIRED) EXECUTION CONTEXTS - 
    1)GLOBAL EC (DIFFERENT FOR BROWSER and NODE ENVIRONMENT)
    2)FUNCTION/FUNCTIONAL EC
    3)EVAL EC  (NOT REQUIRED) (PART OF GLOBAL)
*/

/* JS CODE IS RUN IN 2 PHASES
    1)MEMORY CREATION PHASE / MEMORY PHASE / CREATION PHASE 
        ( VARIABLES ARE ALLOCATED MEMORY (NO EXECUTION ))
    2)EXECUTION PHASE (EXECUTION OCCURS HERE)
*/

/* STEPS - 
    1) GLOBAL EXECUTION
    2) MEMORY CREATION PHASE
        -all variables are allocated memory and value is undefined
        -functions get definition (instead of undefined)
    3) EXECUTION PHASE
        -variables get values
        -function declarations are ignored
        -function calls CREATE NEW EXECUTION CONTEXT
            a)CREATES NEW VARIABLE ENVIRONMENT AND EXECUTION THREAD
            b)MEMORY AND EXECUTION PHASE ARE REPEATED AS ABOVE FOR THE FUNTION (ONLY)
            c)If something was returned, it is returned to PARENT/GLOBAL EXECUTION CONTEXT
            d)AFTER THE FUNCTION IS OVER, THIS EXECUTION CONTEXT IS DELETED
            e)if same function is called again, the EXECUTION CONTEXT IS CREATED AGAIN
               EVERYTIME
*/

/*CALL STACK (LIKE NORMAL STACK)
    1)GLOBAL EXECUTION COMES FIRST
    2)FUNCTIONS ARE ADDED AND REMOVED AS THEY ARE CALLED IN THE CODE
    3)IF FUNCTIONS CALL ANOTHER FUNCTION WITHIN THEN THAT FUNCTION IS 
        ADDED AFTER THE PARENT FUNTION AND REMOVED BEFORE THE PARENT FUNCTION 
        (NORMAL LIFO PRINCIPLE)
*/